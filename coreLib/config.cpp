/*******************************************************************************

<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

********************************************************************************

config.cpp

*******************************************************************************/

#include <SDL2/SDL.h>
#include "console.hpp"
#include "config.hpp"

namespace coreLib
{

namespace config
{

// Config directory.
const std::filesystem::path CFGFile::cfgDirPath("./config");
const std::filesystem::directory_entry CFGFile::cfgDirectory(CFGFile::cfgDirPath);

// CVAR format.
const std::regex CFGFile::cvarFormat("^\\s*([a-zA-Z]+)\\s+[0-9.]\\s&", std::regex_constants::icase);

/**
 *
 */

// Constructor. Simply assigns the filename.

CFGFile::CFGFile(const std::string_view &filename)
{
	cfgFilePath.assign(cfgDirPath.string() + "/" + filename.data());
}

//
void CFGFile::load()
{
	std::smatch rm;

	// Open config file. If it does not exist, do nothing, as there is nothing
	// to do, obviously.
	cfgFile.open(cfgFilePath.string(), std::ios::in);
	if(!cfgFile.is_open())
	{

		return;
	}

	std::string line;

	while(std::getline(cfgFile, line))
	{
		std::regex_match(line, rm, cvarFormat);
		if(rm.size())
		{
			for(auto &m : rm)
			{
				printf("%s\n", m.str().c_str());
			}
		}
	}

	cfgFile.close();
}

void CFGFile::save()
{
	cfgFile.open(cfgFilePath.string(), std::ios::out);
	if(!cfgFile.is_open())
	{

	}

	cfgFile << "# Configuration file ''\n# Do not edit this file!\n";

	for(auto &[name, cv] : console::systemCVARs)
		cfgFile << "\n" << name << " " << cv->value;

	cfgFile.close();
}

//
/**
 * Initializes the configuration system. Checks that the directory for config
 * files and the default file exist; tries to creates them if they don't. Sets
 * any uninitialized settings to default.
 *
 * Neither the config directory or the default config file are absolutely
 * required. If either cannot be created, all defaults will be used.
 */

uint8_t init()
{
	if(!CFGFile::cfgDirectory.exists())
	{
		if(!std::filesystem::create_directory(CFGFile::cfgDirPath))
		{

		}
	}

	/*
	// If we can't open the default config file, then simply use defaults for
	// all settings.
	CFGFile cfgFile("config.cfg");

	for(auto &[name, cv] : console::systemCVARs)
	{
		cv->reset();
	}

	cfgFile.load();
	for(auto &[name, cv] : console::systemCVARs)
		if(cv->value.empty())
			cv->reset();
	*/

	return 0;
}

void quit()
{
	CFGFile cfgFile("config.cfg");
	cfgFile.save();
}

} // namespace config

} // namespace coreLib
